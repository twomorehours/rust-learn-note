// 总结
// 1. 编译时能确定大小 && 生命周期确定 => stack
//    - 代码在编译时需要确定栈帧的大小（运行时栈帧的大小要依靠编译结果得到），也就是函数内的变量必须是大小确定的，如果不确定将不能编译
//    - 栈上的值随着栈帧的结束就是释放 生命周期时确定的 如果一个值不能随着栈帧额结束而释放，则并不能放在栈上
// 2. 编译时不能确定大小 || 生命周期不确定 => heap
//    - 编译时不能确定大小的值放在堆上 比如字符串 然后留一个固定大小的指针在栈上
//    - 生命周期不确定得要放在堆上 比如可能被多个线程引用得值 不能随着一个线程得结束就释放

// 课后题
// 1. 多线程引用的值可以放在栈上吗
//    - 不可以 因为被多个线程引用得值 不能随着一个线程得结束就释放
// 2. 栈中的值可以被指针引用吗
//    - 可以 只要指针的使用范围不超出值的所在范围（指针的声明周期不大于值得生命周期）

fn main() {
    println!("Hello, world!");
}
